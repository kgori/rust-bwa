/* automatically generated by rust-bindgen 0.63.0 */
#![allow(non_snake_case, non_camel_case_types)]

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const BWA_IDX_BWT: u32 = 1;
pub const BWA_IDX_BNS: u32 = 2;
pub const BWA_IDX_PAC: u32 = 4;
pub const BWA_IDX_ALL: u32 = 7;
pub const MEM_F_PE: u32 = 2;
pub const MEM_F_NOPAIRING: u32 = 4;
pub const MEM_F_ALL: u32 = 8;
pub const MEM_F_NO_MULTI: u32 = 16;
pub const MEM_F_NO_RESCUE: u32 = 32;
pub const MEM_F_REF_HDR: u32 = 256;
pub const MEM_F_SOFTCLIP: u32 = 512;
pub const MEM_F_SMARTPE: u32 = 1024;
pub const MEM_F_PRIMARY5: u32 = 2048;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __darwin_off_t = __int64_t;
pub type bwtint_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bwt_t {
    pub primary: bwtint_t,
    pub L2: [bwtint_t; 5usize],
    pub seq_len: bwtint_t,
    pub bwt_size: bwtint_t,
    pub bwt: *mut u32,
    pub cnt_table: [u32; 256usize],
    pub sa_intv: ::std::os::raw::c_int,
    pub n_sa: bwtint_t,
    pub sa: *mut bwtint_t,
}
#[test]
fn bindgen_test_layout_bwt_t() {
    const UNINIT: ::std::mem::MaybeUninit<bwt_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bwt_t>(),
        1120usize,
        concat!("Size of: ", stringify!(bwt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<bwt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(bwt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primary) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bwt_t),
            "::",
            stringify!(primary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).L2) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(bwt_t), "::", stringify!(L2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq_len) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(bwt_t),
            "::",
            stringify!(seq_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bwt_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(bwt_t),
            "::",
            stringify!(bwt_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bwt) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(bwt_t),
            "::",
            stringify!(bwt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cnt_table) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(bwt_t),
            "::",
            stringify!(cnt_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_intv) as usize - ptr as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(bwt_t),
            "::",
            stringify!(sa_intv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_sa) as usize - ptr as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(bwt_t),
            "::",
            stringify!(n_sa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize },
        1112usize,
        concat!("Offset of field: ", stringify!(bwt_t), "::", stringify!(sa))
    );
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    const UNINIT: ::std::mem::MaybeUninit<__sbuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    const UNINIT: ::std::mem::MaybeUninit<__sFILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._r) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._file) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._bf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lbfsize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cookie) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._close) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._read) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._seek) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._write) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ub) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._extra) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ur) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ubuf) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._nbuf) as usize - ptr as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lb) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._blksize) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
pub type FILE = __sFILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bntann1_t {
    pub offset: i64,
    pub len: i32,
    pub n_ambs: i32,
    pub gi: u32,
    pub is_alt: i32,
    pub name: *mut ::std::os::raw::c_char,
    pub anno: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_bntann1_t() {
    const UNINIT: ::std::mem::MaybeUninit<bntann1_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bntann1_t>(),
        40usize,
        concat!("Size of: ", stringify!(bntann1_t))
    );
    assert_eq!(
        ::std::mem::align_of::<bntann1_t>(),
        8usize,
        concat!("Alignment of ", stringify!(bntann1_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bntann1_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bntann1_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_ambs) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bntann1_t),
            "::",
            stringify!(n_ambs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gi) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bntann1_t),
            "::",
            stringify!(gi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_alt) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(bntann1_t),
            "::",
            stringify!(is_alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bntann1_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anno) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bntann1_t),
            "::",
            stringify!(anno)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bntamb1_t {
    pub offset: i64,
    pub len: i32,
    pub amb: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_bntamb1_t() {
    const UNINIT: ::std::mem::MaybeUninit<bntamb1_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bntamb1_t>(),
        16usize,
        concat!("Size of: ", stringify!(bntamb1_t))
    );
    assert_eq!(
        ::std::mem::align_of::<bntamb1_t>(),
        8usize,
        concat!("Alignment of ", stringify!(bntamb1_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bntamb1_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bntamb1_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amb) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bntamb1_t),
            "::",
            stringify!(amb)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bntseq_t {
    pub l_pac: i64,
    pub n_seqs: i32,
    pub seed: u32,
    pub anns: *mut bntann1_t,
    pub n_holes: i32,
    pub ambs: *mut bntamb1_t,
    pub fp_pac: *mut FILE,
}
#[test]
fn bindgen_test_layout_bntseq_t() {
    const UNINIT: ::std::mem::MaybeUninit<bntseq_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bntseq_t>(),
        48usize,
        concat!("Size of: ", stringify!(bntseq_t))
    );
    assert_eq!(
        ::std::mem::align_of::<bntseq_t>(),
        8usize,
        concat!("Alignment of ", stringify!(bntseq_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_pac) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bntseq_t),
            "::",
            stringify!(l_pac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_seqs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bntseq_t),
            "::",
            stringify!(n_seqs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seed) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bntseq_t),
            "::",
            stringify!(seed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anns) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bntseq_t),
            "::",
            stringify!(anns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_holes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bntseq_t),
            "::",
            stringify!(n_holes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ambs) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bntseq_t),
            "::",
            stringify!(ambs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_pac) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bntseq_t),
            "::",
            stringify!(fp_pac)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bwaidx_t {
    pub bwt: *mut bwt_t,
    pub bns: *mut bntseq_t,
    pub pac: *mut u8,
    pub is_shm: ::std::os::raw::c_int,
    pub l_mem: i64,
    pub mem: *mut u8,
}
#[test]
fn bindgen_test_layout_bwaidx_t() {
    const UNINIT: ::std::mem::MaybeUninit<bwaidx_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bwaidx_t>(),
        48usize,
        concat!("Size of: ", stringify!(bwaidx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<bwaidx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(bwaidx_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bwt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bwaidx_t),
            "::",
            stringify!(bwt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bns) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bwaidx_t),
            "::",
            stringify!(bns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pac) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bwaidx_t),
            "::",
            stringify!(pac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_shm) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bwaidx_t),
            "::",
            stringify!(is_shm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_mem) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bwaidx_t),
            "::",
            stringify!(l_mem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bwaidx_t),
            "::",
            stringify!(mem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bseq1_t {
    pub l_seq: ::std::os::raw::c_int,
    pub id: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub comment: *mut ::std::os::raw::c_char,
    pub seq: *mut ::std::os::raw::c_char,
    pub qual: *mut ::std::os::raw::c_char,
    pub sam: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_bseq1_t() {
    const UNINIT: ::std::mem::MaybeUninit<bseq1_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bseq1_t>(),
        48usize,
        concat!("Size of: ", stringify!(bseq1_t))
    );
    assert_eq!(
        ::std::mem::align_of::<bseq1_t>(),
        8usize,
        concat!("Alignment of ", stringify!(bseq1_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_seq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bseq1_t),
            "::",
            stringify!(l_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bseq1_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bseq1_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bseq1_t),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bseq1_t),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qual) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bseq1_t),
            "::",
            stringify!(qual)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sam) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bseq1_t),
            "::",
            stringify!(sam)
        )
    );
}
extern "C" {
    pub fn bwa_fill_scmat(a: ::std::os::raw::c_int, b: ::std::os::raw::c_int, mat: *mut i8);
}
extern "C" {
    pub fn bwa_idx_load(
        hint: *const ::std::os::raw::c_char,
        which: ::std::os::raw::c_int,
    ) -> *mut bwaidx_t;
}
extern "C" {
    pub fn bwa_idx_destroy(idx: *mut bwaidx_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mem_opt_t {
    pub a: ::std::os::raw::c_int,
    pub b: ::std::os::raw::c_int,
    pub o_del: ::std::os::raw::c_int,
    pub e_del: ::std::os::raw::c_int,
    pub o_ins: ::std::os::raw::c_int,
    pub e_ins: ::std::os::raw::c_int,
    pub pen_unpaired: ::std::os::raw::c_int,
    pub pen_clip5: ::std::os::raw::c_int,
    pub pen_clip3: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub zdrop: ::std::os::raw::c_int,
    pub max_mem_intv: u64,
    pub T: ::std::os::raw::c_int,
    pub flag: ::std::os::raw::c_int,
    pub min_seed_len: ::std::os::raw::c_int,
    pub min_chain_weight: ::std::os::raw::c_int,
    pub max_chain_extend: ::std::os::raw::c_int,
    pub split_factor: f32,
    pub split_width: ::std::os::raw::c_int,
    pub max_occ: ::std::os::raw::c_int,
    pub max_chain_gap: ::std::os::raw::c_int,
    pub n_threads: ::std::os::raw::c_int,
    pub chunk_size: ::std::os::raw::c_int,
    pub mask_level: f32,
    pub drop_ratio: f32,
    pub XA_drop_ratio: f32,
    pub mask_level_redun: f32,
    pub mapQ_coef_len: f32,
    pub mapQ_coef_fac: ::std::os::raw::c_int,
    pub max_ins: ::std::os::raw::c_int,
    pub max_matesw: ::std::os::raw::c_int,
    pub max_XA_hits: ::std::os::raw::c_int,
    pub max_XA_hits_alt: ::std::os::raw::c_int,
    pub mat: [i8; 25usize],
}
#[test]
fn bindgen_test_layout_mem_opt_t() {
    const UNINIT: ::std::mem::MaybeUninit<mem_opt_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mem_opt_t>(),
        168usize,
        concat!("Size of: ", stringify!(mem_opt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mem_opt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mem_opt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).o_del) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(o_del)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_del) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(e_del)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).o_ins) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(o_ins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_ins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(e_ins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pen_unpaired) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(pen_unpaired)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pen_clip5) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(pen_clip5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pen_clip3) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(pen_clip3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zdrop) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(zdrop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_mem_intv) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(max_mem_intv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).T) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(T)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_seed_len) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(min_seed_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_chain_weight) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(min_chain_weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_chain_extend) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(max_chain_extend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).split_factor) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(split_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).split_width) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(split_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_occ) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(max_occ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_chain_gap) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(max_chain_gap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_threads) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(n_threads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_size) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(chunk_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask_level) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(mask_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drop_ratio) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(drop_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).XA_drop_ratio) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(XA_drop_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask_level_redun) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(mask_level_redun)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mapQ_coef_len) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(mapQ_coef_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mapQ_coef_fac) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(mapQ_coef_fac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_ins) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(max_ins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_matesw) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(max_matesw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_XA_hits) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(max_XA_hits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_XA_hits_alt) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(max_XA_hits_alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mat) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_opt_t),
            "::",
            stringify!(mat)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mem_alnreg_t {
    pub rb: i64,
    pub re: i64,
    pub qb: ::std::os::raw::c_int,
    pub qe: ::std::os::raw::c_int,
    pub rid: ::std::os::raw::c_int,
    pub score: ::std::os::raw::c_int,
    pub truesc: ::std::os::raw::c_int,
    pub sub: ::std::os::raw::c_int,
    pub alt_sc: ::std::os::raw::c_int,
    pub csub: ::std::os::raw::c_int,
    pub sub_n: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub seedcov: ::std::os::raw::c_int,
    pub secondary: ::std::os::raw::c_int,
    pub secondary_all: ::std::os::raw::c_int,
    pub seedlen0: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub frac_rep: f32,
    pub hash: u64,
}
#[test]
fn bindgen_test_layout_mem_alnreg_t() {
    const UNINIT: ::std::mem::MaybeUninit<mem_alnreg_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mem_alnreg_t>(),
        88usize,
        concat!("Size of: ", stringify!(mem_alnreg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mem_alnreg_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mem_alnreg_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_alnreg_t),
            "::",
            stringify!(rb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_alnreg_t),
            "::",
            stringify!(re)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_alnreg_t),
            "::",
            stringify!(qb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qe) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_alnreg_t),
            "::",
            stringify!(qe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_alnreg_t),
            "::",
            stringify!(rid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).score) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_alnreg_t),
            "::",
            stringify!(score)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).truesc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_alnreg_t),
            "::",
            stringify!(truesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sub) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_alnreg_t),
            "::",
            stringify!(sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_sc) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_alnreg_t),
            "::",
            stringify!(alt_sc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csub) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_alnreg_t),
            "::",
            stringify!(csub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sub_n) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_alnreg_t),
            "::",
            stringify!(sub_n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_alnreg_t),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seedcov) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_alnreg_t),
            "::",
            stringify!(seedcov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).secondary) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_alnreg_t),
            "::",
            stringify!(secondary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).secondary_all) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_alnreg_t),
            "::",
            stringify!(secondary_all)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seedlen0) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_alnreg_t),
            "::",
            stringify!(seedlen0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frac_rep) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_alnreg_t),
            "::",
            stringify!(frac_rep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_alnreg_t),
            "::",
            stringify!(hash)
        )
    );
}
impl mem_alnreg_t {
    #[inline]
    pub fn n_comp(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_n_comp(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn is_alt(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_is_alt(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        n_comp: ::std::os::raw::c_int,
        is_alt: ::std::os::raw::c_int,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 30u8, {
            let n_comp: u32 = unsafe { ::std::mem::transmute(n_comp) };
            n_comp as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let is_alt: u32 = unsafe { ::std::mem::transmute(is_alt) };
            is_alt as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mem_alnreg_v {
    pub n: usize,
    pub m: usize,
    pub a: *mut mem_alnreg_t,
}
#[test]
fn bindgen_test_layout_mem_alnreg_v() {
    const UNINIT: ::std::mem::MaybeUninit<mem_alnreg_v> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mem_alnreg_v>(),
        24usize,
        concat!("Size of: ", stringify!(mem_alnreg_v))
    );
    assert_eq!(
        ::std::mem::align_of::<mem_alnreg_v>(),
        8usize,
        concat!("Alignment of ", stringify!(mem_alnreg_v))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_alnreg_v),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_alnreg_v),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_alnreg_v),
            "::",
            stringify!(a)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mem_pestat_t {
    pub low: ::std::os::raw::c_int,
    pub high: ::std::os::raw::c_int,
    pub failed: ::std::os::raw::c_int,
    pub avg: f64,
    pub std: f64,
}
#[test]
fn bindgen_test_layout_mem_pestat_t() {
    const UNINIT: ::std::mem::MaybeUninit<mem_pestat_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mem_pestat_t>(),
        32usize,
        concat!("Size of: ", stringify!(mem_pestat_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mem_pestat_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mem_pestat_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_pestat_t),
            "::",
            stringify!(low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_pestat_t),
            "::",
            stringify!(high)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).failed) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_pestat_t),
            "::",
            stringify!(failed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).avg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_pestat_t),
            "::",
            stringify!(avg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).std) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mem_pestat_t),
            "::",
            stringify!(std)
        )
    );
}
extern "C" {
    pub fn mem_opt_init() -> *mut mem_opt_t;
}
extern "C" {
    pub fn mem_process_seqs(
        opt: *const mem_opt_t,
        bwt: *const bwt_t,
        bns: *const bntseq_t,
        pac: *const u8,
        n_processed: i64,
        n: ::std::os::raw::c_int,
        seqs: *mut bseq1_t,
        pes0: *const mem_pestat_t,
    );
}
extern "C" {
    pub fn mem_process_seq_pe(
        opt: *const mem_opt_t,
        bwt: *const bwt_t,
        bns: *const bntseq_t,
        pac: *const u8,
        seqs: *mut bseq1_t,
        pes: *const mem_pestat_t,
    );
}
extern "C" {
    pub fn mem_align1(
        opt: *const mem_opt_t,
        bwt: *const bwt_t,
        bns: *const bntseq_t,
        pac: *const u8,
        l_seq: ::std::os::raw::c_int,
        seq: *const ::std::os::raw::c_char,
    ) -> mem_alnreg_v;
}
